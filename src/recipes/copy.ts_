//(async function run() {
import path from 'path';
import {fileURLToPath} from 'url';
//const fs   = require('fs').promises;
import fs from 'fs/promises';
//const path = require('path');
//const { execa } = require('execa');
//const { execa } = await import('execa');

const __dirname = path.dirname(fileURLToPath(import.meta.url));

//const ejs = require('ejs');


async function removeDirRecursive(dirname) {
  return fs.rm(dirname, {recursive: true})
    .catch(e => {
      if (e.code !== 'ENOENT') throw e; // be silent if dir doesn't exists
    });
}

async function getFilesRecursive(startDir: string, {extnames, excludeDirs}: {
  extnames: string[],
  excludeDirs: string[]
}) {
  if (extnames && !Array.isArray(extnames)) extnames = [extnames];
  if (excludeDirs && !Array.isArray(excludeDirs)) excludeDirs = [excludeDirs];

  async function _getFiles(dir: string) {
    const dirents = await fs.readdir(dir, {withFileTypes: true});
    const files = await Promise.all(dirents
      .filter((dirent) => {
        return (
          dirent.isDirectory() && (
            excludeDirs
              ? excludeDirs.every(d => path.resolve(startDir, d) !== path.resolve(dir, dirent.name))
              : true
          ) || (
            dirent.isFile() && (extnames ? extnames.some(e => dirent.name.endsWith(e)) : true)
          )
        )
      })
      .map((dirent) => {
        const res = path.resolve(dir, dirent.name);
        return dirent.isDirectory() ? _getFiles(res) : res;
      }));
    return Array.prototype.concat(...files);
  }

  return _getFiles(startDir)

}


// const DEBUG = false;
//
// const PROJECT_ROOT_DIR = path.resolve(__dirname, '..');
// //const packageJson = await import('../package.json', { assert: { type: "json" } });
// const packageJsonPathname = path.resolve(PROJECT_ROOT_DIR, 'package.json');
// //const packageJson         = await import('file://'+packageJsonPathname, { assert: { type: "json" } });
// const packageJson = await fs.readFile(packageJsonPathname, {encoding: 'utf8'})
//   .then(JSON.parse);
//
// if (packageJson.name !== 'presentations') throw  new Error('Invalid location for this module')

//const ejsDefaultConfig = require(path.resolve(PROJECT_ROOT_DIR, 'ejs-defaults.json'));
//const ejsDefaultConfig = await import(path.resolve(PROJECT_ROOT_DIR, 'ejs-defaults.json'), { assert: { type: "json" } });
// const ejsDefaultConfig = await fs.readFile(path.resolve(PROJECT_ROOT_DIR, 'ejs-defaults.json'), {encoding: 'utf8'}).then(JSON.parse);
//
// const EXCLUDE_SRC_DIRS = ['_archive', path.join('misc', '_partials'),]
//
// const ejsDefaultOptions = {
//   root: PROJECT_ROOT_DIR, //views: [ path.resolve(PROJECT_ROOT_DIR, 'src') ],
//   rmWhitespace: !DEBUG,
// }

const SOURCE_SUBDIR = './src/'
const TARGET_CONTENT_SUBDIR = './dist/content'
const TARGET_NODE_MODULES_SUBDIR = './dist'

// const SOURCE_BASE_DIR = path.join(PROJECT_ROOT_DIR, SOURCE_SUBDIR)
// const TARGET_CONTENT_BASE_DIR = path.join(PROJECT_ROOT_DIR, TARGET_CONTENT_SUBDIR)
// const TARGET_NODE_MODULES_BASE_DIR = path.join(PROJECT_ROOT_DIR, TARGET_NODE_MODULES_SUBDIR)


export async function copyResources() {
  const imgFiles = await getFilesRecursive(SOURCE_BASE_DIR, {
    extnames: ['.bmp', '.png', '.jpg', '.jpeg', '.webp', '.gif', '.svg', '.css', '.ttf', '.woff', '.woff2',],
    excludeDirs: EXCLUDE_SRC_DIRS,
  })
  //const imgFiles = [
  //  'D:\\teach\\05. МИСиС. 1.01. Веб-разработка\\presentations2\\src\\00-contents\\index.ejs',
  //  ]
  //console.log(imgFiles)

  for (let i in imgFiles) {
    const sourcePathname = imgFiles[i]
    const sourceDir = path.dirname(sourcePathname)
    const relDir = path.relative(SOURCE_BASE_DIR, sourceDir)
    const targetDir = path.resolve(TARGET_CONTENT_BASE_DIR, relDir)
    const sourceFilename = path.basename(sourcePathname);
    //const targetFilename = path.basename(sourcePathname, path.extname(sourcePathname)) + '.html';
    const targetFilename = sourceFilename;//path.basename(sourcePathname, path.extname(sourcePathname)) + '.html';
    const targetPathname = path.resolve(targetDir, targetFilename);
    //console.log(sourcePathname, '>>>', targetPathname);
    //
    await fs.mkdir(targetDir, {recursive: true})
    //
    await fs.copyFile(sourcePathname, targetPathname);
    //const src = await fs.readFile(sourcePathname, 'utf8')
    ////
    //const ejsOptions = Object.assign({}, ejsDefaultOptions, {
    //  root: SOURCE_BASE_DIR,
    //  views: [ sourceDir ],
    //  rmWhitespace: !DEBUG,
    //});
    ////
    //let html = ejs.render(src, ejsConfig, ejsOptions);
    ////console.log(html)
    ////
    //await fs.writeFile(targetPathname, html, 'utf8');
  }
}

