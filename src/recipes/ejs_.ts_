//(async function run() {
import path from 'path';
import { fileURLToPath } from 'url';
const __dirname = path.dirname(fileURLToPath(import.meta.url));

import fs        from 'fs/promises';
import ejs   from 'ejs';

const DEBUG = false;

const PROJECT_ROOT_DIR    = path.resolve(__dirname, '..');
//const packageJson = await import('../package.json', { assert: { type: "json" } });
const packageJsonPathname = path.resolve(PROJECT_ROOT_DIR, 'package.json');
//const packageJson         = await import('file://'+packageJsonPathname, { assert: { type: "json" } });
const packageJson         = await fs.readFile(packageJsonPathname, { encoding: 'utf8' })
  .then(JSON.parse);

if (packageJson.name !== 'presentations') throw  new Error('Invalid location for this module')

//const ejsDefaultConfig = require(path.resolve(PROJECT_ROOT_DIR, 'ejs-defaults.json'));
//const ejsDefaultConfig = await import(path.resolve(PROJECT_ROOT_DIR, 'ejs-defaults.json'), { assert: { type: "json" } });
const ejsDefaultConfig = await fs.readFile(path.resolve(PROJECT_ROOT_DIR, 'ejs-defaults.json'), { encoding: 'utf8' }).then(JSON.parse);

const EXCLUDE_SRC_DIRS = [ '_archive', path.join('misc', '_partials'), ]

const ejsDefaultOptions = {
  root:         PROJECT_ROOT_DIR, //views: [ path.resolve(PROJECT_ROOT_DIR, 'src') ],
  rmWhitespace: !DEBUG,
}

const SOURCE_SUBDIR              = './src/'
const TARGET_CONTENT_SUBDIR      = './dist/content'
const TARGET_NODE_MODULES_SUBDIR = './dist'

const SOURCE_BASE_DIR              = path.join(PROJECT_ROOT_DIR, SOURCE_SUBDIR)
const TARGET_CONTENT_BASE_DIR      = path.join(PROJECT_ROOT_DIR, TARGET_CONTENT_SUBDIR)
const TARGET_NODE_MODULES_BASE_DIR = path.join(PROJECT_ROOT_DIR, TARGET_NODE_MODULES_SUBDIR)


export class Installer {

  async cleanup() {
    await removeDirRecursive(TARGET_CONTENT_BASE_DIR);
    await removeDirRecursive(path.join(TARGET_NODE_MODULES_BASE_DIR, 'node_modules'));
  }

  async processTemplates() {
    const ejsFiles = await getFilesRecursive(SOURCE_BASE_DIR, {
      extnames: '.ejs',
      excludeDirs: EXCLUDE_SRC_DIRS,
    })
    //const ejsFiles = [
    //  'D:\\teach\\05. МИСиС. 1.01. Веб-разработка\\presentations2\\src\\00-contents\\index.ejs',
    //  ]
    //console.log(ejsFiles)

    for (let i in ejsFiles) {
      const sourcePathname = ejsFiles[ i ]
      const sourceDir      = path.dirname(sourcePathname)
      const relDir         = path.relative(SOURCE_BASE_DIR, sourceDir)
      const targetDir      = path.resolve(TARGET_CONTENT_BASE_DIR, relDir)
      const sourceFilename = path.basename(sourcePathname);
      const targetFilename = path.basename(sourcePathname, path.extname(sourcePathname)) + '.html';
      const targetPathname = path.resolve(targetDir, targetFilename);
      //console.log(sourcePathname, '>>>', targetPathname);
      //
      await fs.mkdir(targetDir, { recursive: true });
      //
      const src        = await fs.readFile(sourcePathname, 'utf8')
      //
      const ejsOptions = Object.assign({}, ejsDefaultOptions, {
        root: SOURCE_BASE_DIR,
        views: [ sourceDir ],
        rmWhitespace: false, //!DEBUG,  <-- must be off to allow markdown indents to work
      });
      const ejsConfig  = Object.assign({}, ejsDefaultConfig, {});

      let html = ejs.render(src, ejsConfig, ejsOptions);
      //console.log(html)
      //
      await fs
        .writeFile(targetPathname, html,'utf8');
    }
  }

  async copyResources() {
    const imgFiles = await getFilesRecursive(SOURCE_BASE_DIR, {
      extnames:    [ '.bmp', '.png', '.jpg', '.jpeg', '.webp', '.gif', '.svg', '.css', '.ttf', '.woff', '.woff2', ],
      excludeDirs: EXCLUDE_SRC_DIRS,
    })
    //const imgFiles = [
    //  'D:\\teach\\05. МИСиС. 1.01. Веб-разработка\\presentations2\\src\\00-contents\\index.ejs',
    //  ]
    //console.log(imgFiles)

    for (let i in imgFiles) {
      const sourcePathname = imgFiles[ i ]
      const sourceDir      = path.dirname(sourcePathname)
      const relDir         = path.relative(SOURCE_BASE_DIR, sourceDir)
      const targetDir      = path.resolve(TARGET_CONTENT_BASE_DIR, relDir)
      const sourceFilename = path.basename(sourcePathname);
      //const targetFilename = path.basename(sourcePathname, path.extname(sourcePathname)) + '.html';
      const targetFilename = sourceFilename;//path.basename(sourcePathname, path.extname(sourcePathname)) + '.html';
      const targetPathname = path.resolve(targetDir, targetFilename);
      //console.log(sourcePathname, '>>>', targetPathname);
      //
      await fs.mkdir(targetDir, { recursive: true })
      //
      await fs.copyFile(sourcePathname, targetPathname);
      //const src = await fs.readFile(sourcePathname, 'utf8')
      ////
      //const ejsOptions = Object.assign({}, ejsDefaultOptions, {
      //  root: SOURCE_BASE_DIR,
      //  views: [ sourceDir ],
      //  rmWhitespace: !DEBUG,
      //});
      ////
      //let html = ejs.render(src, ejsConfig, ejsOptions);
      ////console.log(html)
      ////
      //await fs.writeFile(targetPathname, html, 'utf8');
    }
  }

  //

  _getBuildPkg() {
    return path.resolve(TARGET_NODE_MODULES_BASE_DIR, path.basename(packageJsonPathname));
  }

  async copyBuildPkg() {
    const buildPkg = this._getBuildPkg();
    await fs.copyFile(packageJsonPathname, buildPkg);
  }

  async cleanupBuildPkg(isRemovePkg) {
    const buildPkg = this._getBuildPkg();
    if (isRemovePkg) {
      await fs.rm(buildPkg);
    }
  }

}
